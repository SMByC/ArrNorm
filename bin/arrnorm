#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import multiprocessing
import queue
from osgeo import gdal
from osgeo.gdalconst import GA_ReadOnly
from osgeo_utils.gdal_calc import Calc as gdal_calc

# add project dir to pythonpath
project_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
if project_dir not in sys.path:
    sys.path.append(project_dir)

from arrnorm import iMad, radcal, register

header = '''
==============================================================

ArrNorm - Automatic Relative Radiometric Normalization

Some code base on: Dr. Mort Canty
                   https://github.com/mortcanty/CRCDocker

Copyright (c) SMByC-IDEAM
Author: Xavier C. Llano <xavier.corredor.llano@gmail.com>
Sistema de Monitoreo de Bosques y Carbono - SMByC
IDEAM, Colombia

==============================================================
'''


class Normalization:
    def __init__(self, count, img_ref, img_target, max_iters, threshold, reg, onlyreg, noneg, mask, warpband, chunksize):
        self.count = count
        self.img_ref = img_ref
        self.img_target = img_target
        self.ref_text = "Image ({0})".format(self.count + 1)
        self.max_iters = max_iters
        self.threshold = threshold
        self.reg = reg
        self.onlyreg = onlyreg
        self.noneg = noneg
        self.mask = mask
        self.warpband = warpband
        self.chunksize = chunksize

        # define the output type
        ref_dtype = gdal.Open(self.img_ref, GA_ReadOnly).GetRasterBand(1).DataType
        target_dtype = gdal.Open(self.img_target, GA_ReadOnly).GetRasterBand(1).DataType
        self.out_dtype = ref_dtype if ref_dtype > target_dtype else target_dtype
        ref_dtype = None
        target_dtype = None

    def run(self):

        print("\nPROCESSING IMAGE: {target} ({count})".format(
            target=os.path.basename(self.img_target),
            count=str(self.count + 1)
        ))

        self.clipper()

        if self.reg:
            self.register()
            #self.no_negative_value(self.img_target_reg)

            if self.onlyreg:
                print('\nDONE: {ref_text} PROCESSED\n'
                      '      register successfully for:  {img_orig}\n'.format(
                        ref_text=self.ref_text,
                        img_orig=os.path.basename(self.img_target)))
                return

        self.imad()
        self.radcal()
        if self.noneg:
            self.no_negative_value(self.img_norm)

        if self.mask:
            self.make_mask()
            self.apply_mask()

        self.clean()

        print('\nDONE: {ref_text} PROCESSED\n'
              '      ArrNorm successfully for:  {img_orig}\n'
              '      image normalized saved in: {img_norm}\n'.format(
                ref_text=self.ref_text,
                img_orig=os.path.basename(self.img_target),
                img_norm=os.path.basename(self.img_norm)))

    def clipper(self):
        """Clip the reference image with the target image"""

        print("\n======================================\n"
              "Clipping the ref image with target:", self.ref_text, os.path.basename(self.img_ref))

        data = gdal.Open(self.img_target, GA_ReadOnly)
        geoTransform = data.GetGeoTransform()
        minx = geoTransform[0]
        maxy = geoTransform[3]
        maxx = minx + geoTransform[1] * data.RasterXSize
        miny = maxy + geoTransform[5] * data.RasterYSize
        print("Extent:", minx, maxy, maxx, miny)
        data = None
        filename, ext = os.path.splitext(os.path.basename(self.img_ref))
        self.img_ref_clip = os.path.join(os.path.dirname(os.path.abspath(self.img_target)),
                                         filename + "_" + os.path.splitext(os.path.basename(self.img_target))[0]
                                         + "_clip" + ext)

        try:
            gdal.Translate(self.img_ref_clip, self.img_ref, projWin=[minx, maxy, maxx, miny], format='GTiff')
            print('Clipped ref image successfully: ' + os.path.basename(self.img_ref_clip))
        except Exception as e:
            self.clean()
            print('\nError clipping reference image: ' + str(e))
            sys.exit(1)

    def imad(self):
        # ======================================
        # iMad process

        if self.reg:
            img_target = self.img_target_reg
        else:
            img_target = self.img_target

        print("\n======================================\n"
              "iMad process for:", self.ref_text, os.path.basename(self.img_target))
        self.img_imad = iMad.main(self.img_ref_clip, img_target,
                                  ref_text=self.ref_text, max_iters=self.max_iters)

    def register(self):
        # ======================================
        # registration image-image in frequency domain

        print("\n======================================\n"
              "Registration image-image in frequency domain:", self.ref_text, os.path.basename(self.img_target))
        self.img_target_reg = register.main(self.img_ref_clip, self.img_target, self.warpband, self.chunksize)

    def radcal(self):
        # ======================================
        # Radcal process

        print("\n======================================\n"
              "Radcal process for:", self.ref_text, os.path.basename(self.img_target),
              " with iMad image: ", os.path.basename(self.img_imad))
        self.img_norm = radcal.main(self.img_imad, ncpThresh=self.threshold, out_dtype=self.out_dtype)

    def no_negative_value(self, image):
        # ======================================
        # Convert negative values to NoData to image normalized

        print('\n======================================\n'
              'Converting negative values for:', self.ref_text, os.path.basename(image))

        tmp_image = image.replace('.tif', '_tmp.tif')

        try:
            gdal_calc(A=image, outfile=tmp_image, calc="A*(A>=0)", NoDataValue=0,
                      allBands="A", overwrite=True, quiet=True, creation_options=["BIGTIFF=YES"])
            os.remove(image)
            os.rename(tmp_image, image)
            print('Negative values converted successfully: ' + os.path.basename(image))
        except Exception as e:
            self.clean()
            print('\nError converting values: ' + str(e))
            sys.exit(1)

    def make_mask(self):
        # ======================================
        # Make mask

        if self.reg:
            img_to_process = self.img_target_reg
        else:
            img_to_process = self.img_target

        print('\n======================================\n'
              'Making mask for:', self.ref_text, os.path.basename(img_to_process))

        filename, ext = os.path.splitext(os.path.basename(img_to_process))
        self.mask_file = os.path.join(os.path.dirname(os.path.abspath(img_to_process)), filename + "_mask" + ext)

        try:
            gdal_calc(A=img_to_process, outfile=self.mask_file, type="Byte", calc="1*(A>0)", hideNoData=True,
                      allBands="A", overwrite=True, quiet=True, creation_options=["BIGTIFF=YES", "COMPRESS=PACKBITS"])
            print('Mask created successfully: ' + os.path.basename(self.mask_file))
        except Exception as e:
            print('\nError creating mask: ' + str(e))
            sys.exit(1)

    def apply_mask(self):
        # ======================================
        # Apply mask to image normalized

        print('\n======================================\n'
              'Applying mask for:', self.ref_text, os.path.basename(self.img_norm))
        tmp_img_norm = self.img_norm.replace('.tif', '_tmp.tif')

        try:
            gdal_calc(A=self.img_norm, B=self.mask_file, outfile=tmp_img_norm,
                      calc="A*(B==1)", NoDataValue=0, allBands="A", overwrite=True, quiet=True,
                      creation_options=["COMPRESS=LZW", "PREDICTOR=2", "BIGTIFF=YES"])
            os.remove(self.img_norm)
            os.rename(tmp_img_norm, self.img_norm)
            print('Mask applied successfully: ' + os.path.basename(self.mask_file))
        except Exception as e:
            self.clean()
            print('\nError applying mask: ' + str(e))
            sys.exit(1)

    def clean(self):
        # delete the MAD file
        if os.path.exists(self.img_imad):
            os.remove(self.img_imad)
        # delete the clip reference image
        if os.path.exists(self.img_ref_clip):
            os.remove(self.img_ref_clip)


def process(norm_class, args):
    norm_instance = norm_class(*args)
    norm_instance.run()


def meta_process(args):
    process(*args)



if __name__ == '__main__':
    # ======================================
    multiprocessing.freeze_support()

    # ======================================
    # PARSER AND CHECK ARGUMENTS

    # Create parser arguments
    arguments = argparse.ArgumentParser(
        prog="arrnorm",
        description="Automatic relative radiometric normalization",
        epilog="Xavier Corredor Llano <xcorredorl@ideam.gov.co>\n"
               "Sistema de Monitoreo de Bosques y Carbono - SMBYC\n"
               "IDEAM, Colombia",
        formatter_class=argparse.RawTextHelpFormatter)

    arguments.add_argument('-ref', type=str, default="/home/smbyc/data/Cristhian/Landsat/AV2575_C2_2000_2021_v1.tif",
                           help='reference image for iMad normalize', required=False)
    arguments.add_argument('-i', type=int, default=30,
                           help='number of iterations', required=False)
    arguments.add_argument('-t', type=float, default=0.95,
                           help='no-change probability threshold', required=False)
    arguments.add_argument('-p', type=int, default=multiprocessing.cpu_count(),
                           help='number of process/threads', required=False)
    arguments.add_argument('-m', action='store_true', default=True,
                           help='create and apply nodata mask', required=False)
    arguments.add_argument('-reg', action='store_true', default=False,
                           help='registration image-image in frequency domain', required=False)
    arguments.add_argument('-noneg', action='store_true', default=False,
                           help='convert all negative values to nodata (0) for output', required=False)
    arguments.add_argument('-warpband', type=int, default=2,
                           help='number of target band for make registration, requires "-reg"', required=False)
    arguments.add_argument('-chunksize', type=int, default=None,
                           help='chunk size for make registration by chunks, requires "-reg"', required=False)
    arguments.add_argument('-onlyreg', action='store_true', default=False,
                           help='only makes registration process and not iMad normalize, requires "-reg"',
                           required=False)
    arguments.add_argument('images', type=str, nargs='+',
                           help='images to apply the iMad normalization')

    arg = arguments.parse_args()

    # ======================================
    # Processing

    print(header)
    # create the instance
    q = queue.Queue()
    # number of threads
    number_of_processes = arg.p

    print('Reference image: ', os.path.basename(arg.ref))
    print('Creating {num_proc} multiprocesses'.format(num_proc=number_of_processes))


    with multiprocessing.Pool(number_of_processes) as pool:

        TASKS = [(Normalization, (img_count, arg.ref, img_target, arg.i, arg.t, arg.reg, arg.onlyreg, arg.noneg, arg.m, arg.warpband, arg.chunksize))
                 for img_count, img_target in enumerate(arg.images)]

        imap_it = pool.imap(meta_process, TASKS)

        [proc for proc in imap_it]

    print('\nFINISH: successfully process for {num_img} images\n'.format(num_img=len(arg.images)))

